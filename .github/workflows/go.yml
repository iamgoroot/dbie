name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      pg_bun:
        image: postgres
        env:
          POSTGRES_DB: test
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
         - 5432:5432
      pg_gorm:
        image: postgres
        env:
          POSTGRES_DB: test
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_PORT: 5433
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      pg_pg:
        image: postgres
        env:
          POSTGRES_DB: test
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_PORT: 5434
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.18'
          cache: true
          check-latest: true
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: 6.0
          mongodb-username: user
          mongodb-password: pass
          mongodb-db: test
      - name: Install tool
        run: |
          cd test && go get -u github.com/iamgoroot/dbietool && go install github.com/iamgoroot/dbietool
      - name: Generate
        run: |
          cd test/repo && go generate ./...
      - name: Build
        run: go build .
      - name: Test root package coverage
        run: |
          go test -gcflags=-l -v  -coverprofile=coverage.txt -coverpkg=../... -covermode=atomic ./...
      - name: Run integration tests
        run: |
          cd test && go get ./... && go test -gcflags=-l -v  -coverprofile=coverage.txt -coverpkg=../... -covermode=atomic ./...
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          flags: unittests
          fail_ci_if_error: true
          verbose: true
      - name: Run Vet
        run:  go vet ./...
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
